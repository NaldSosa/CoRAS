# Generated by Django 5.2.5 on 2025-09-29 18:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Barangay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barangay_name', models.CharField(max_length=100, unique=True)),
                ('municipality', models.CharField(default='General Mariano Alvarez', max_length=100)),
                ('province', models.CharField(default='Cavite', max_length=100)),
                ('region', models.CharField(default='Region IV-A', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sms_notification', models.BooleanField()),
                ('email_notification', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='PatientInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('birthdate', models.DateField()),
                ('age', models.IntegerField()),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('civil_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married'), ('Widowed', 'Widowed'), ('Separated', 'Separated')], max_length=20)),
                ('contact_num', models.CharField(max_length=20)),
                ('address', models.CharField(max_length=255)),
                ('barangay', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.CharField(max_length=50)),
                ('recommendation', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='RiskChart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sex', models.CharField(max_length=10)),
                ('age_group', models.CharField(max_length=50)),
                ('smoker_status', models.CharField(max_length=50)),
                ('bmi_group', models.CharField(max_length=50)),
                ('sbp_group', models.CharField(max_length=50)),
                ('risk_percentage', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='RiskLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_level', models.CharField(max_length=50)),
                ('risk_color', models.CharField(max_length=50)),
                ('risk_label', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('suffix', models.CharField(blank=True, max_length=50, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('log_details', models.TextField()),
                ('action', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date_time', models.DateTimeField(auto_now_add=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_synced', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.patientinformation')),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('health_provider', models.CharField(max_length=50)),
                ('date_time', models.DateTimeField()),
                ('rhu', models.CharField(max_length=50)),
                ('is_completed', models.BooleanField(default=False)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.assessment')),
            ],
        ),
        migrations.CreateModel(
            name='PatientIntakeRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hypertension', models.BooleanField()),
                ('stroke', models.BooleanField()),
                ('heart_attack', models.BooleanField()),
                ('diabetes', models.BooleanField()),
                ('asthma', models.BooleanField()),
                ('cancer', models.BooleanField()),
                ('kidney_disease', models.BooleanField()),
                ('height', models.IntegerField()),
                ('weight', models.IntegerField()),
                ('bmi', models.FloatField()),
                ('bmi_category', models.CharField(max_length=50)),
                ('obesity', models.BooleanField()),
                ('waist_circumference', models.IntegerField()),
                ('hip_circumference', models.IntegerField()),
                ('whr_ratio', models.FloatField()),
                ('whr_category', models.CharField(max_length=50)),
                ('central_adiposity', models.BooleanField()),
                ('first_sbp', models.IntegerField()),
                ('first_dbp', models.IntegerField()),
                ('second_sbp', models.IntegerField()),
                ('second_dbp', models.IntegerField()),
                ('avg_sbp', models.IntegerField()),
                ('avg_dbp', models.IntegerField()),
                ('bp_category', models.CharField(max_length=50)),
                ('raised_bp', models.BooleanField()),
                ('existing_medication', models.CharField(blank=True, max_length=100, null=True)),
                ('medicine_mg', models.IntegerField(blank=True, null=True)),
                ('smoking_status', models.CharField(max_length=50)),
                ('drinks_alcohol', models.CharField(max_length=50)),
                ('excessive_alcohol_use', models.CharField(max_length=50)),
                ('high_fat_salt_intake', models.CharField(max_length=50)),
                ('vegetable_intake', models.CharField(max_length=50)),
                ('fruit_intake', models.CharField(max_length=50)),
                ('physical_activity', models.CharField(max_length=50)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.patientinformation')),
            ],
        ),
        migrations.CreateModel(
            name='PatientScreening',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_one', models.BooleanField()),
                ('question_two', models.BooleanField(blank=True, null=True)),
                ('question_three', models.BooleanField(blank=True, null=True)),
                ('question_four', models.BooleanField(blank=True, null=True)),
                ('question_five', models.BooleanField(blank=True, null=True)),
                ('question_six', models.BooleanField(blank=True, null=True)),
                ('question_seven', models.BooleanField(blank=True, null=True)),
                ('possible_angina_heart_attack', models.BooleanField()),
                ('question_eight', models.BooleanField()),
                ('possible_stroke_tia', models.BooleanField()),
                ('is_diagnosed_diabetes', models.CharField(max_length=50)),
                ('with_without_medication', models.CharField(blank=True, max_length=50, null=True)),
                ('existing_diabetes_medicines', models.CharField(blank=True, max_length=100, null=True)),
                ('diabetes_med_milligrams', models.IntegerField(blank=True, null=True)),
                ('have_polyphagia', models.BooleanField()),
                ('have_polydipsia', models.BooleanField()),
                ('have_polyuria', models.BooleanField()),
                ('patient_intake_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.patientintakerecord')),
            ],
        ),
        migrations.CreateModel(
            name='Quota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('quota_limit', models.IntegerField()),
                ('daily_assessment_data', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.assessment')),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.recommendation')),
                ('risk_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.riskchart')),
            ],
        ),
        migrations.AddField(
            model_name='riskchart',
            name='risk_level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.risklevel'),
        ),
        migrations.CreateModel(
            name='RuralHealthUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rhu_name', models.CharField(max_length=100, unique=True)),
                ('barangay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_models.barangay')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='riskchart',
            unique_together={('sex', 'age_group', 'smoker_status', 'bmi_group', 'sbp_group')},
        ),
    ]
